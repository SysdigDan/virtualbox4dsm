#!/bin/sh

# Package
PACKAGE="virtualbox"

# some variables
INSTALL_DIR="/usr/local/${PACKAGE}"
WEB_DIR="/var/services/web/"
PACKAGE_DIR="/var/packages/${PACKAGE}"
VBOX_USER=root
USER=${USER}

# wizard variables
PHPVBOX_NOAUTH=$([ "${wizard_no_auth}" == "true" ] && echo "true" || echo "false")
PHPVBOX_ADVANCEDCONFIG=$([ "${wizard_enable_advanced_config}" == "true" ] && echo "true" || echo "false")
PHPVBOX_STARTSTOPCONFIG=$([ "${wizard_start_stop_config}" == "true" ] && echo "true" || echo "false")
PHPVBOX_LNG=$([ "${wizard_language_ger}" == "true" ] && echo "de" || echo "en")
PHPVBOX_KBD=$([ "${wizard_keyboard_layout_ger}" == "true" ] && echo "DE" || echo "EN")
VBOX_HTTPS=$([ "${wizard_use_https}" == "true" ] && echo "true" || echo "false")
VBOX_ACTION="acpibutton"
VBOX_ACTION=$([ "${wizard_on_stop_poweroff}" == "true" ] && echo "poweroff" || echo $VBOX_ACTION)
VBOX_ACTION=$([ "${wizard_on_stop_acpibutton}" == "true" ] && echo "acpibutton" || echo $VBOX_ACTION)
VBOX_ACTION=$([ "${wizard_on_stop_savestate}" == "true" ] && echo "savestate" || echo $VBOX_ACTION)
SHARE_NAME="${wizard_virtualbox_share}"
WEBSVC_BIND="${wizard_bind_ip}"
WEBSVC_PASS="${wizard_use_vboxwebsvc_pass}"
WEBSVC_PROTOCOL=$([ "${VBOX_HTTPS}" == "true" ] && echo "https" || echo "http")
if [ "${WEBSVC_DOMAIN}" == "" ]; then
  WEBSVC_URL="${WEBSVC_PROTOCOL}://${wizard_bind_ip}:18083"
else
  WEBSVC_URL="${WEBSVC_PROTOCOL}://${{wizard_vboxsvcdomain}:18083"
fi
if [ "${WEBSVC_BIND}" == "0.0.0.0" ]; then
  WEBSVC_URL="${WEBSVC_PROTOCOL}://127.0.0.1:18083"
fi

WOL_SVC=$([ "${wizard_enable_wol}" == "true" ]  && echo "true" || echo "false")
INTEGRATE=$([ "${wizard_integrate}" == "true" ]  && echo "true" || echo "false")

# get dynamic stuff
VOL_PATH=$(servicetool --get-alive-volume)
KERNEL=$(uname -a | awk '{print $3}')
DIST=$(uname -a | awk '{print $14}')

preinst ()
{
	# check for supported kernel
	if [[ ${KERNEL} != "3.10.102" && ${KERNEL} != "3.10.77" && ${KERNEL} != "3.10.35" && ${KERNEL} != "3.2.40" ]]; then
		echo "Kernel ${KERNEL} is not supported"
		exit 1
	fi

	exit 0
}

postinst ()
{
	#create shared folder if needed
	synoshare --get ${SHARE_NAME} > /dev/null 2>&1
	if [ $? -ne 0 ]
	then
    		# create shared folder
    		synoshare -add  ${SHARE_NAME} "Virtualbox home folder"  ${VOL_PATH}/${SHARE_NAME} "" "${USER},${VBOX_USER}" "" 0 7 > /dev/null 2>&1
    		synoshare --setuser ${SHARE_NAME} RW = ${USER},${VBOX_USER} > /dev/null 2>&1
    		if [ "`synoacltool -get ${VOL_PATH}/${SHARE_NAME} | grep \"user:${VBOX_USER}\"`" ]
    		then
     			synoacltool -replace ${VOL_PATH}/${SHARE_NAME} `synoacltool -get ${VOL_PATH}/${SHARE_NAME} | grep "user:${VBOX_USER}" | awk 'BEGIN { OFS=" "; } { gsub(/[^[:alnum:]]/, "", $1); print $1;}' | head -1` user:${VBOX_USER}:allow:rwxpdDaARWcCo:fd-- > /dev/null 2>&1
    		else
      			synoacltool -add ${VOL_PATH}/${SHARE_NAME} user:${VBOX_USER}:allow:rwxpdDaARWcCo:fd-- > /dev/null 2>&1
    		fi
	else
    		# set rights on existing folder for new user
    		synoshare --setuser ${SHARE_NAME} RW = ${USER},${VBOX_USER} > /dev/null 2>&1
    		if [ "`synoacltool -get ${VOL_PATH}/${SHARE_NAME}|grep \"user:${VBOX_USER}\"`" ]
    		then
      			synoacltool -replace ${VOL_PATH}/${SHARE_NAME} `synoacltool -get ${VOL_PATH}/${SHARE_NAME} | grep "user:${VBOX_USER}" | awk 'BEGIN { OFS=" "; } { gsub(/[^[:alnum:]]/, "", $1); print $1;}'|head -1` user:${VBOX_USER}:allow:rwxpdDaARWcCo:fd-- > /dev/null 2>&1
    		else
      			synoacltool -add ${VOL_PATH}/${SHARE_NAME} user:${VBOX_USER}:allow:rwxpdDaARWcCo:fd-- > /dev/null 2>&1
    		fi

    		# This gives error during install 
			# Ensure the vbox user is in administrators group (Syno share perm fix)
    		#if [ `echo ${ADMIN_USERS} | grep ${VBOX_USER}|wc -l` -eq 0 ]
    		#then
      		#	synogroup --member administrators ${VBOX_USER} > /dev/null 2>&1
    		#fi
	fi

	# lets create link to share path, just in case
	SHARE_PATH=$(synoshare --get virtualbox | grep 'Path' | cut -d[ -f2 | cut -d] -f1)
	ln -sf ${SHARE_PATH} "${PACKAGE_DIR}/target/share"
	echo "SHARE_PATH=${SHARE_PATH}" > "${PACKAGE_DIR}/target/.config"

	if [ ! -d ${SHARE_PATH} ]; then
		echo "Share folder '${SHARE_PATH}' doesn't exist!"
		exit 1
	fi

	# Link package dir to install dir
	ln -s ${SYNOPKG_PKGDEST} ${INSTALL_DIR}

	if [ "${INTEGRATE}" == "false" ]; then
		# Install the phpVirtualBox web interface in web station
		mkdir -p ${WEB_DIR}/phpvirtualbox
		cp -pR ${INSTALL_DIR}/www/phpvirtualbox ${WEB_DIR}/

		if [ $? -ne 0 ]; then
			echo "Unable to install phpwirtualbox"
			exit 1
		fi
	fi
	
	# Create a default configuration file for phpVirtualBox
	if [ "${INTEGRATE}" == "false" ]; then
		CONFIG_PHP="${WEB_DIR}/phpvirtualbox/config.php"
	else
		CONFIG_PHP="${INSTALL_DIR}/www/phpvirtualbox/config.php"
	fi
	
	if [ ! -f "${CONFIG_PHP}" ]; then
		cp "${INSTALL_DIR}/www/config.php.synology" "${CONFIG_PHP}"
		sed -i -e "s|@user@|${VBOX_USER:=}|g" "${CONFIG_PHP}"
		sed -i -e "s|@pass@|${WEBSVC_PASS:=}|g" "${CONFIG_PHP}"
		sed -i -e "s|@location@|${WEBSVC_URL:=}|g" "${CONFIG_PHP}"
		sed -i -e "s|@noAuth@|${PHPVBOX_NOAUTH:=true}|g" "${CONFIG_PHP}"
		sed -i -e "s|@enableAdvancedConfig@|${PHPVBOX_ADVANCEDCONFIG:=true}|g" "${CONFIG_PHP}"
		sed -i -e "s|@startStopConfig@|${PHPVBOX_STARTSTOPCONFIG:=true}|g" "${CONFIG_PHP}"
		sed -i -e "s|@lng@|${PHPVBOX_LNG:=en}|g" "${CONFIG_PHP}"
		sed -i -e "s|@kbd@|${PHPVBOX_KBD:=EN}|g" "${CONFIG_PHP}"
		chmod ga+w "${CONFIG_PHP}"
	fi

   	# Install vbox to /opt/VirtualBox
	[ ! -d /opt ] && mkdir /opt
	cp -pR "${INSTALL_DIR}/opt/VirtualBox" /opt/VirtualBox

	if [ $? -ne 0 ]; then
		echo "Unable to install virtualbox to /opt/VirtualBox"
		exit 1
	fi
	
	# ensure SUID root
	chmod 4711 /opt/VirtualBox/VBoxHeadless

	# check for libs
	if [ ! -f "/lib/libz.so.1.2.8" ]; then
		cp "${PACKAGE_DIR}"/target/lib/libz.so.1.2.8 /lib/
	fi
	
	if [ ! -f "/lib64/libz.so.1.2.8" ]; then
		cp "${PACKAGE_DIR}"/target/lib64/libz.so.1.2.8 /lib64/
	fi

	# create symlinks for libs
	[ ! -L "/lib/libz.so" ] && ln -s /lib/libz.so.1.2.8 /lib/libz.so
	[ ! -L "/lib/libz.so.1" ] && ln -s /lib/libz.so.1.2.8 /lib/libz.so.1
	[ ! -L "/lib64/libz.so" ] && ln -s /lib64/libz.so.1.2.8 /lib64/libz.so
	[ ! -L "/lib64/libz.so.1" ] && ln -s /lib64/libz.so.1.2.8 /lib64/libz.so.1

	# Create a default configuration file for VirtualBox
	if [ ! -d "/etc/vbox" ]; then
		cp -rf "${INSTALL_DIR}"/etc/vbox /etc/
		sed -i -e "s|acpibutton|${VBOX_ACTION}|g" /etc/vbox/vbox.cfg
		sed -i -e "s|root|${VBOX_USER}|g" /etc/vbox/vbox.cfg
        sed -i -e "s|/var/log/vbox.log|${VOL_PATH}/${SHARE_NAME}/vbox.log|g" /etc/vbox/vbox.cfg
		sed -i -e "s|127.0.0.1|${WEBSVC_BIND}|g" /etc/vbox/vbox.cfg
		if [ "${WEBSVC_BIND}" != "127.0.0.1" ]; then
			sed -i -e "s|VBOXWEB_AUTH_LIBRARY=null|VBOXWEB_AUTH_LIBRARY='VBoxAuthSimple'|g" /etc/vbox/vbox.cfg
			PWHASH=$(/opt/VirtualBox/VBoxManage internalcommands passwordhash "${WEBSVC_PASS}" | cut -d ' '  -f 3)
			echo "VBOXWEB_AUTH_PWHASH='${PWHASH}'" >>  /etc/vbox/vbox.cfg
		fi
		if [ "${VBOX_HTTPS}" == "true" ]; then
			cat /usr/syno/etc/ssl/ssl.crt/server.crt > /etc/vbox/server.pem
			cat /usr/syno/etc/ssl/ssl.key/server.key >> /etc/vbox/server.pem
			echo "VBOXWEB_SSL_KEYFILE='/etc/vbox/server.pem'" >>  /etc/vbox/vbox.cfg
		fi
	fi

	# should enable WOL deamon
	if [ "${WOL_SVC}" == "true" ]; then
		touch /var/packages/virtualbox/enabled_wol
		sed -i -e "s|@url@|${WEBSVC_URL}|g" "/etc/vbox/vboxwolservice.ini"			
		
		PWHASH=$("${PACKAGE_DIR}/target/wol/vboxwebclient.py" --hash ${WEBSVC_PASS})
		sed -i -e "s|@pwhash@|${PWHASH:=}|g" "/etc/vbox/vboxwolservice.ini"
	else
		[ -f /var/packages/virtualbox/enabled_wol ] && rm -f /var/packages/virtualbox/enabled_wol
	fi
		
	# Install service definition
	/usr/syno/bin/servicetool --install-configure-file --package /var/packages/virtualbox/target/virtualbox.sc

	# set default vm machine folder to share
	# set default vm machine folder to ${VOL_PATH}/${SHARE_NAME}"
	/opt/VirtualBox/VBoxManage setproperty machinefolder ${VOL_PATH}/${SHARE_NAME}

	# move additions iso to share
	if [ -d /opt/VirtualBox/additions ]; then
		cp -R  ${VOL_PATH}/${SHARE_NAME}
		rm -rf /opt/VirtualBox/additions
	fi
	
	exit 0
}

preuninst ()
{
	if [ "UNINSTALL" = "$SYNOPKG_PKG_STATUS" ]; then
		# remove service configure file when uninstalling the package
		/usr/syno/bin/servicetool --remove-configure-file --package virtualbox.sc

		# stop service
		"${PACKAGE_DIR}/target/scripts/start-stop-status" stop		
	fi

    exit 0
}

postuninst ()
{
	# Remove link
	rm -f ${INSTALL_DIR}

	# Remove the web interface
	rm -fr ${WEB_DIR}/phpvirtualbox

	if [ -d /etc/vbox ]; then
		rm -fr /etc/vbox
	fi

	# Remove vbox
	if [ -d /opt/VirtualBox ]; then
		rm -fr /opt/VirtualBox
		if [ ! "$(ls -A /opt)" ]; then
			rmdir /opt
		fi
	fi

	# remove configuration (old one should be in share)
	rm -rf /root/.config/VirtualBox
	
    exit 0
}

preupgrade ()
{
	# stop service
	"${PACKAGE_DIR}/target/scripts/start-stop-status" stop

	# Save some stuff
	rm -fr ${TMP_DIR}/${PACKAGE}
	mkdir -p ${TMP_DIR}/${PACKAGE}
	[ -f "${WEB_DIR}/phpvirtualbox/config.php" ] && mv "${WEB_DIR}/phpvirtualbox/config.php" ${TMP_DIR}/${PACKAGE}/
	[ -f /etc/vbox/vbox.cfg ] && mv /etc/vbox/vbox.cfg ${TMP_DIR}/${PACKAGE}/
	[ -f /etc/vbox/vboxwolservice.ini ] && mv /etc/vbox/vboxwolservice.ini ${TMP_DIR}/${PACKAGE}/
	wizard_bind_ip=${/bin/get_key_value /etc/vbox/vbox.cfg VBOXWEB_HOST}
	exit 0
}

postupgrade ()
{
	# Restore some stuff
	rm -f "${WEB_DIR}/phpvirtualbox/config.php"
	[ -f ${TMP_DIR}/${PACKAGE}/config.php ] && mv ${TMP_DIR}/${PACKAGE}/config.php "${WEB_DIR}/phpvirtualbox/config.php"
	[ -f ${TMP_DIR}/${PACKAGE}/vbox.cfg ] && mv ${TMP_DIR}/${PACKAGE}/vbox.cfg /etc/vbox/vbox.cfg
	[ -f ${TMP_DIR}/${PACKAGE}/vboxwolservice.ini ] && mv ${TMP_DIR}/${PACKAGE}/vboxwolservice.ini /etc/vbox/vboxwolservice.ini
	rm -fr ${TMP_DIR}/${PACKAGE}

	# start service
    "${PACKAGE_DIR}/target/scripts/start-stop-status" start

   	exit 0
}

set_key_value() {
	xfile="$1"
	param="$2"
	value="$3"
	grep -q "${param}" ${xfile} && \
		/bin/sed -i "s/^${param}.*/${param}=\"${value}\"/" ${xfile} || \
		echo "${param}=\"${value}\"" >> ${xfile}
}

